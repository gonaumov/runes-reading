{"version":3,"sources":["constants/ActionTypes.ts","actions/actions.ts","selectors/selected-spread.ts","components/Home.tsx","selectors/selected-runes.ts","components/Answer.tsx","App.tsx","serviceWorker.ts","initialState.ts","reducers/runes.ts","typeguards/typeguards.ts","sagas.ts","index.tsx"],"names":["SET_SELECTED_SPREAD","RUNES_REQUEST_FAILED","SPREADS_REQUEST_FAILED","GET_RUNES","GET_SPREADS","INIT","init","spread_number","type","actionTypes","setRunes","runes","payload","setSpreads","spreads","selectedSpread","state","selected_spread","toString","find","spread","spread_id","connect","dispatch","withRouter","props","match","useEffect","params","spreadId","react_default","a","createElement","className","src","alt","spread_description","onSubmit","e","preventDefault","history","push","htmlFor","required","id","value","onChange","concat","target","map","key","spread_name","selectedRunes","s","sort","Math","random","b","slice","spread_runes_count","renderRune","rune","Fragment","rune_name","title","rune_id","rune_image","rune_meaning","onClick","shift","renderDiamond","renderFork","renderNorn","renderSingle","App","_ref","store","es","react_router_dom","basename","process","react_router","path","component","Answer","Home","Boolean","window","location","hostname","initialState","input","arguments","length","undefined","action","Object","objectSpread","Array","every","keys","item","includes","isArrayFromSpreads","onFetchRunes","onFetchSpreads","onInit","rootSaga","regenerator_default","wrap","_context2","prev","next","takeEvery","mark","fetchRecords","response","responseBody","_context","select","sent","call","fetch","put","t0","stop","_marked","_context4","_context3","_marked2","_context6","_context5","putResolve","parseInt","_marked3","_context7","all","_marked4","sagaMiddleware","createSagaMiddleware","createStore","compose","applyMiddleware","devToolsEnhancer","run","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.800f4336.chunk.js","sourcesContent":["export const SET_SELECTED_SPREAD = 'SET_SELECTED_SPREAD'\nexport const RUNES_RECEIVED = 'RUNES/RECEIVED'\nexport const RUNES_REQUEST_FAILED = 'RUNES/REQUEST_FAILED'\nexport const SPREADS_RECEIVED = 'SPREADS/RECEIVED'\nexport const SPREADS_REQUEST_FAILED = 'SPREADS/REQUEST_FAILED'\nexport const GET_RUNES = 'RUNES/FETCH'\nexport const GET_SPREADS = 'SPREADS/FETCH'\nexport const INIT = 'INIT'\n","import * as actionTypes from \"../constants/ActionTypes\"\n\nexport const setSelectedSpread = (selected_spread: string) => ({\n    type: actionTypes.SET_SELECTED_SPREAD,\n    payload: {\n        selected_spread: parseInt(selected_spread, 10)\n    }\n})\n\nexport const getRunes = () => ({\n    type: actionTypes.GET_RUNES\n})\n\nexport const init = (spread_number: string) => ({\n    type: actionTypes.INIT,\n    spread_number\n})\n\nexport const setRunes = (runes: Array<object>) => ({\n    type: actionTypes.RUNES_RECEIVED,\n    payload: {\n        runes\n    }\n})\n\nexport const getSpreads = () => ({\n    type: actionTypes.GET_SPREADS\n})\n\nexport const setSpreads = (spreads: Array<object>) => ({\n    type: actionTypes.SPREADS_RECEIVED,\n    payload: {\n        spreads\n    }\n})\n\n\n\n\n","const selectedSpread = (state: State): Spread | null => {\n   if (state.selected_spread === null) {\n       return null\n   }\n\n   const selected_spread = state.selected_spread.toString()\n   const spread = state.spreads.find((spread: Spread) => \n   spread.spread_id === selected_spread) || null\n   return spread   \n}\n\nexport default selectedSpread\n","import React, { useEffect } from 'react'\nimport { Dispatch, Action } from 'redux'\nimport { connect, MapDispatchToProps } from 'react-redux'\nimport { withRouter, RouteComponentProps } from \"react-router-dom\"\nimport { init } from '../actions/actions'\nimport selectedSpread from '../selectors/selected-spread'\nimport { StaticContext } from 'react-router';\n\ninterface StateProps {\n  spreads: Array<Spread>\n  selectedSpread: Spread | null\n}\n\ninterface DispatchProps {\n  init: typeof init\n}\n\ntype Props = StateProps & DispatchProps & RouteComponentProps<{ spreadId: string | undefined }, StaticContext, {}>\n\nconst Home: React.FC<Props> = (props: Props) => {\n  const {\n    spreads,\n    selectedSpread,\n    match,\n    init\n  } = props\n\n  useEffect(() => {\n    init(match.params.spreadId || '')\n  }, [match, init])\n\n  return (\n    <div className='container'>\n      <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 border-bottom box-shadow\">\n        <h1 className=\"my-0 mr-md-auto font-weight-normal\">\n          A simple runic oracle\n      </h1>\n        <div className='row'>\n          <div className='cell'>\n            <img src='Valknut.png' alt='Valknut' />\n          </div>\n        </div>\n      </div>\n      {selectedSpread ?\n        <div className=\"text-justify\">\n          <div className='font-weight-bold'>\n            Spread description:\n        </div>\n          {selectedSpread.spread_description}\n        </div> : null}\n      <form onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        if (selectedSpread === null)\n          return\n        props.history.push('/answer/' + selectedSpread.spread_id)\n      }}>\n        <div className=\"form-group\">\n          <label htmlFor='select_spread'>\n            Please select spread\n          </label>\n          <select\n            required\n            className='form-control'\n            id='select_spread'\n            value={selectedSpread ? selectedSpread.spread_id : ''}\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n              props.history.push('/'.concat(e.target.value !== '' ? e.target.value : ''))}\n          >\n            <option value=''>Select your spread</option>\n            {spreads.map(\n              (spread: Spread) =>\n                (<option\n                  key={spread.spread_id}\n                  value={spread.spread_id}>\n                  {spread.spread_name}\n                </option>))\n            }\n          </select>\n        </div>\n        <div className='form-group'>\n          <label htmlFor=\"question\">\n            Please type your question\n        </label>\n          <textarea id=\"question\" required className='form-control'></textarea>\n        </div>\n        <input className=\"btn btn-primary\" type=\"submit\" value=\"Cast stones\"></input>\n      </form>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n  return {\n    spreads: state.spreads,\n    selectedSpread: selectedSpread(state)\n  }\n}\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch<Action>) => {\n  return {\n    init: (spread_number: string) => (\n      dispatch(init(spread_number))\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Home))\n","const selectedRunes = (state: State): Array<Rune> => {\n    if(state.selected_spread === null) {\n        return []\n    }\n    \n    const selectedSpread = state.spreads.find((s: Spread) => (\n        state.selected_spread !== null \n        && s.spread_id === state.selected_spread.toString()\n    ))\n    \n    if (!selectedSpread) {\n        return []\n    }\n\n    return state.runes\n        .map((a: Rune) => ({sort: Math.random(), value: a}))\n        .sort((a, b) => a.sort - b.sort)\n        .map((a) => a.value).slice(0, selectedSpread.spread_runes_count)\n }\n \n export default selectedRunes","import React, { useEffect } from 'react'\nimport { Dispatch, Action } from 'redux'\nimport { withRouter, RouteComponentProps } from \"react-router-dom\"\nimport { connect, MapDispatchToProps } from 'react-redux'\nimport { init } from '../actions/actions'\nimport selectedRunes from '../selectors/selected-runes'\nimport selectedSpread from '../selectors/selected-spread'\nimport { StaticContext } from 'react-router'\n\ninterface StateProps {\n  selectedRunes: Array<Rune>\n  selectedSpread: Spread | null\n}\n\ninterface DispatchProps {\n  init: typeof init\n}\n\ntype Props = StateProps & DispatchProps & RouteComponentProps<{spreadId: string | undefined}, StaticContext, {}>\n\nconst renderRune = (rune: Rune | undefined): JSX.Element | null => {\n  if (typeof rune === 'undefined') {\n    return null\n  }\n\n  return (\n  <>\n  <p>\n   {rune.rune_name}\n  </p>  \n  <img\n    title={rune.rune_name}\n    key={rune.rune_id}\n    alt={rune.rune_name}\n    src={'../images/' + rune.rune_image}\n  />\n  <p>\n   {rune.rune_meaning}\n  </p>  \n  </>\n  )\n}\n\nconst renderSingle = (runes: Array<Rune>): JSX.Element => {\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst renderNorn = (runes: Array<Rune>): JSX.Element => {\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst renderFork = (runes: Array<Rune>): JSX.Element => {\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n        <div className=\"col\">\n        </div>\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n        </div>\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n        <div className=\"col\">\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst renderDiamond = (runes: Array<Rune>): JSX.Element => {\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col\">\n        </div>\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n        <div className=\"col\">\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n        <div className=\"col\">\n        </div>\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n        </div>\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n        <div className=\"col\">\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst renderCross = (runes: Array<Rune>): JSX.Element => {\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col\">\n        </div>\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n        <div className=\"col\">\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n        </div>\n        <div className=\"col\">\n          {renderRune(runes.shift())}\n        </div>\n        <div className=\"col\">\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst Answer: React.FC<Props> = (props: Props) => {\n  const { \n          history, \n    selectedRunes, \n   selectedSpread, \n            match, \n            init\n  } = props\n\n  useEffect(() => {\n      init(match.params.spreadId || '')\n  }, [match, init])\n\n  return (\n    <div className=\"container\">\n      <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 border-bottom box-shadow\">\n      <h5 className=\"my-0 mr-md-auto font-weight-normal\">\n        This is your answer:\n      </h5>\n    </div>\n    <button className=\"btn btn-primary\" onClick={() => history.push('/' + (selectedSpread !== null ? selectedSpread.spread_id : ''))}>Ask another question</button>\n      <div className=\"container\">\n        {selectedSpread && selectedSpread.spread_name === 'Cross' && renderCross(selectedRunes)}\n        {selectedSpread && selectedSpread.spread_name === 'Diamond' && renderDiamond(selectedRunes)}\n        {selectedSpread && selectedSpread.spread_name === 'Fork' && renderFork(selectedRunes)}\n        {selectedSpread && selectedSpread.spread_name === 'Norn' && renderNorn(selectedRunes)}\n        {selectedSpread && selectedSpread.spread_name === 'Single' && renderSingle(selectedRunes)}\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n  return {\n     selectedSpread: selectedSpread(state),\n     selectedRunes: selectedRunes(state) \n  }\n}\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch<Action>) => {\n  return {\n    init: (spread_number: string) => (\n      dispatch(init(spread_number))\n    )   \n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Answer))\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport Home from \"./components/Home\"\nimport Answer from \"./components/Answer\"\nimport { Store } from 'redux';\n\nconst App = ({store}: {store: Store<State>}) => (\n  <Provider store={store}>\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/answer/:spreadId(\\d+)\" component={Answer} />\n        <Route path=\"/:spreadId(\\d+)?\" component={Home} />\n      </Switch>\n    </Router>\n  </Provider>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState: State = {\n    runes: [],\n    spreads: [],\n    selected_spread: null\n}\n\nexport default initialState","import { AnyAction } from 'redux'\nimport  * as actionTypes  from '../constants/ActionTypes'\nimport initialState from '../initialState'\nimport { isArrayFromRunes, isArrayFromSpreads } from '../typeguards/typeguards';\n\nconst runes = (state: State = initialState, action: AnyAction): State => {\n    switch (action.type) {\n        case actionTypes.SET_SELECTED_SPREAD:\n            const selected_spread: number | null = \n            typeof action.payload !== 'undefined' &&\n            typeof action.payload.selected_spread === 'number' ? \n            action.payload.selected_spread : null\n            return {\n                ...state,\n                selected_spread\n            }\n        case actionTypes.RUNES_RECEIVED: \n            if (action.payload.runes && isArrayFromRunes(action.payload.runes)) {\n                return {\n                   ...state,\n                   runes: action.payload.runes  \n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        case actionTypes.SPREADS_RECEIVED: \n            if (action.payload.spreads && isArrayFromSpreads(action.payload.spreads)) {\n                return {\n                   ...state,\n                   spreads: action.payload.spreads  \n                }\n            } else {\n                return {\n                    ...state\n                }\n            }    \n        default:\n            return state\n    }\n}\n\nexport default runes","export const isArrayFromRunes =\n    (input: Array<object>): input is Array<Rune> => {\n        return input instanceof Array &&\n            input.every((rune) => (\n                Object.keys(rune).every((item) => (\n                    [\"rune_id\",\n                        \"rune_name\",\n                        \"rune_image\",\n                        \"rune_meaning\"]\n                        .includes(item)))))\n    }\n\nexport const isArrayFromSpreads =\n    (input: Array<object>): input is Array<Spread> => {\n        return input instanceof Array &&\n            input.every((spread) => (\n                Object.keys(spread).every((item) => (\n                    [\"spread_id\",\n                        \"spread_name\",\n                        \"spread_description\",\n                        \"spread_runes_count\"]\n                        .includes(item)))))\n    }","import { takeEvery, put, putResolve, call, all, select } from 'redux-saga/effects'\nimport { setRunes, setSpreads } from './actions/actions'\nimport * as actionTypes from './constants/ActionTypes'\n\nexport function* onFetchRunes() {\n    yield takeEvery(actionTypes.GET_RUNES, function* fetchRecords() {\n      try {\n          const runes: Array<Rune> = yield select((state: State) => state.runes)\n          if (runes.length === 0) {\n            const response = yield call(fetch, '../data/data.json');\n            const responseBody = yield call([response,'json']);\n            yield put(setRunes(responseBody));\n          }\n      } catch (e) {\n        yield put({type: actionTypes.RUNES_REQUEST_FAILED, e})\n      }\n    });\n  }\n\n  export function* onFetchSpreads() {\n    yield takeEvery(actionTypes.GET_SPREADS, function* fetchRecords() {\n      try {\n          const spreads: Array<Spread> = yield select((state: State) => state.spreads)\n          if (spreads.length === 0) {\n            const response = yield call(fetch, '../data/spreads.json');\n            const responseBody = yield call([response,'json']);\n            yield put(setSpreads(responseBody));\n          }\n      } catch (e) {\n          yield put({type: actionTypes.SPREADS_REQUEST_FAILED, e})\n      }\n    });\n  }\n\n  export function* onInit() {\n    yield takeEvery(actionTypes.INIT, function* init(action) {\n       yield putResolve({type: actionTypes.GET_SPREADS})\n       yield putResolve({type: actionTypes.GET_RUNES})\n       yield put({type: actionTypes.SET_SELECTED_SPREAD, payload: {\n        selected_spread: parseInt((action as any).spread_number, 10)\n       }})\n    });\n  }\n  \n  export default function* rootSaga() {\n    yield all([\n      onInit(),\n      onFetchRunes(),\n      onFetchSpreads()\n    ])\n  }  \n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from 'redux-saga'\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport initialState from './initialState'\nimport runes from './reducers/runes'\nimport '../node_modules/bootswatch/dist/darkly/bootstrap.min.css'\nimport rootSaga from './sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n    runes, initialState, \n    compose(\n        applyMiddleware(sagaMiddleware), \n        devToolsEnhancer({}))\n)\n\nsagaMiddleware.run(rootSaga)    \n\nReactDOM.render(<App store={store} />, \n                document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}